<?php
/**
 * File Name: Update.php
 * Automatically generated by QGC tool
 * @date 2021-03-16 11:25:21
 * @version 4.0.0
 */

namespace qh4module\rabc\models\role;


use qh4module\rabc\HpRabc;
use qh4module\rabc\models\BkRelationRolePrivilegeActiveRecord;
use qh4module\rabc\models\BkRoleRelationActiveRecord;
use qh4module\rabc\models\RabcRedis;
use qttx\components\db\DbModel;
use qttx\helper\ArrayHelper;
use qh4module\rabc\models\BkRoleActiveRecord;
use qh4module\rabc\models\BkRoleModel;

/**
 * Class Update
 * 更新tbl_bk_role表单条数据
 * @package qh4module\rabc\models\role
 */
class Update extends BkRoleModel
{

    /**
     * @var string 接收参数,必须：ID
     */
    public $id;

    /**
     * @var string 接收参数,必须：名称
     */
    public $name;

    /**
     * @var string 接收参数,非必须：说明
     */
    public $desc;

    /**
     * @var array 接收参数:上级id
     */
    public $parent_ids = [];

    /**
     * @var array 接收参数,所有下级id
     */
    public $children_ids = [];

    /**
     * @var array 接收参数,关联权限id
     */
    public $privilege_ids;

    /**
     * @inheritDoc
     */
    public function rules()
    {
        return ArrayHelper::merge([
            [['id', 'name', 'parent_ids'], 'required'],
            [['parent_ids'], 'array', 'type' => function ($value) {
                return $value != $this->id;
            }, 'message' => '不可以作为本身的上级'],
            [['children_ids'], 'array', 'type' => function ($value) {
                return $value != $this->id;
            }, 'message' => '不可以作为本身的下级'],
            [['children_ids'], 'array', 'type' => function ($value) {
                return $value != 1;
            }, 'message' => '禁止设置管理员为下级'],
            [['parent_ids'], 'customer', 'callback' => function ($value) {
                $roles = HpRabc::getUserRelationChildrenRole(null, false);
                if (empty(array_diff($value, $roles))) {
                    return true;
                }
                return '上级超出授权范围';
            }],
            [['children_ids'], 'customer', 'callback' => function ($value) {
                $roles = HpRabc::getUserRelationChildrenRole(null, true);
                if (empty(array_diff($value, $roles))) {
                    return true;
                }
                return '下级超出授权范围';
            }],
            [['privilege_ids'],'customer','callback'=>function($value){
                $privileges = HpRabc::getUserRelationPrivilege();
                if (empty(array_diff($value, $privileges))) {
                    return true;
                }
                return '权限超出授权范围';
            }]
        ], parent::rules());
    }

    /**
     * @inheritDoc
     */
    public function run()
    {
        $db = \QTTX::$app->db;

        $db->beginTrans();

        try {

            // 更新角色
            if (!$this->updateRole($db)) {
                return false;
            }

            // 更新上级关系
            $this->updateParent($db);

            // 更新下级关系
            $this->updateChildren($db);

            // 更新权限
            $this->updatePrivilege($db);

            // 清理缓存
            RabcRedis::clearRedis();

            $db->commitTrans();

            return true;

        } catch (\Exception $exception) {
            $db->rollBackTrans();
            throw $exception;
        }
    }

    protected function updateRole($db)
    {
        $model = BkRoleActiveRecord::findOne($this->id);
        if (empty($model)) {
            $this->addError('id', '更新角色不存在');
            return false;
        }
        if ($model->is_fixed == 1) {
            $this->addError('id', '该角色禁止更新');
            return false;
        }
        $model->name = $this->name;
        $model->desc = $this->desc;
        $model->update($db);

        return true;
    }


    /**
     * @param $db DbModel
     */
    protected function updateParent($db)
    {
        // 删除以前的关系
        $db->update(BkRoleRelationActiveRecord::tableName())
            ->col('del_time', time())
            ->whereArray(['role_id' => $this->id])
            ->where('del_time=0')
            ->query();

        if (empty($this->parent_ids)) return;

        foreach ($this->parent_ids as $pid) {
            $model = new BkRoleRelationActiveRecord();
            $model->role_id = $this->id;
            $model->parent_id = $pid;
            $model->del_time = 0;
            $model->insert($db);
        }
    }

    protected function updateChildren($db)
    {
        // 删除以前的关系
        $db->update(BkRoleRelationActiveRecord::tableName())
            ->col('del_time', time())
            ->whereArray(['parent_id' => $this->id])
            ->where('del_time=0')
            ->query();

        if (empty($this->children_ids)) return;

        foreach ($this->children_ids as $cid) {
            $model = new BkRoleRelationActiveRecord();
            $model->role_id = $cid;
            $model->parent_id = $this->id;
            $model->del_time = 0;
            $model->insert($db);
        }
    }

    /**
     * @param $db DbModel
     */
    protected function updatePrivilege($db)
    {
        // 删除以前的关系
        $db->update(BkRelationRolePrivilegeActiveRecord::tableName())
            ->col('del_time', time())
            ->whereArray(['role_id' => $this->id])
            ->where('del_time=0')
            ->query();

        if (empty($this->privilege_ids)) return;

        foreach ($this->privilege_ids as $prv_id) {
            $model = new BkRelationRolePrivilegeActiveRecord();
            $model->role_id = $this->id;
            $model->privilege_id = $prv_id;
            $model->del_time = 0;
            $model->insert($db);
        }
    }
}
