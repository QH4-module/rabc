<?php
/**
 * File Name: BkUserModel.php
 * Automatically generated by QGC tool
 * @date: 2021-04-21 10:38:12
 * @version: 4.0.4
 */

namespace qh4module\rabc\models;


use QTTX;
use qttx\validators\AccountValidator;
use qttx\web\Model;

/**
 * Class BkUserModel
 * @package qh4module\rabc\models
 * @description 数据表tbl_bk_user的Validate模型
 */
class BkUserModel extends Model
{

    /**
     * {@inheritDoc}
     */
    public function rules()
    {
        return [
            [['id', 'create_by'], 'string', ['max' => 64]],
            [['account'], 'account', 'mode' => AccountValidator::TYPE_MODE2],
            [['mobile'], 'mobile'],
            [['email', 'wechat_unionid', 'wechat_openid', 'qq_id', 'alipay_id', 'weibo_id', 'apple_id'], 'string', ['max' => 150]],
            [['password'], 'string', ['max' => 32]],
            [['salt'], 'string', ['max' => 8]],
            [['create_time', 'state', 'del_time'], 'integer'],
        ];
    }

    /**
     * {@inheritDoc}
     */
    public function attributeLangs()
    {
        return [
            'id' => 'ID',
            'account' => '账号',
            'mobile' => '手机号',
            'email' => '邮箱',
            'password' => '密码',
            'salt' => '密码混淆随机数',
            'create_by' => '创建人',
            'create_time' => '创建时间',
            'state' => '状态'
        ];
    }

    /**
     * 获取所有用户id
     * @return array|mixed
     */
    public static function getAllId()
    {
        $key = RabcRedis::user_all_id();

        if (QTTX::$app->redis) {
            $result = QTTX::$app->redis->get($key);
            if ($result) return json_decode($result, true);
        }

        $result = QTTX::$app->db
            ->select('id')
            ->from(BkUserActiveRecord::tableName())
            ->where('del_time=0')
            ->column();

        if (QTTX::$app->redis && $result) {
            QTTX::$app->redis->set($key, json_encode($result));
        }

        return $result;
    }

    /**
     * 获取一条用户信息
     * @param $user_id
     * @param array $field
     * @return array|mixed
     */
    public static function getOneByRedis($user_id, $field = [])
    {
        $key = RabcRedis::user_info($user_id);
        $result = [];
        if (QTTX::$app->redis) {
            $result = QTTX::$app->redis->hgetall($key);
        }

        if (empty($result)) {
            $result_user = BkUserActiveRecord::findOne($user_id)->toArray();
            $result_info = BkUserInfoActiveRecord::findOne($user_id)->toArray();
            $result = array_merge($result_user, $result_info);

            if (QTTX::$app->redis && $result) {
                QTTX::$app->redis->hmset($key, $result);
            }
        }

        if (empty($field)) return $result;
        $resp = [];
        foreach ($field as $item) {
            $resp[$item] = isset($result[$item]) ? $result[$item] : null;
        }
        return $resp;
    }

    /**
     * 从缓存中删除一个用户信息
     * @param $user_id
     */
    public static function delRedisUser($user_id)
    {
        if (QTTX::$app->redis) {
            $key = RabcRedis::user_info($user_id);
            QTTX::$app->redis->del($key);
        }
    }
}
