<?php
/**
 * File Name: Index.php
 * Automatically generated by QGC tool
 * @date: 2021-04-22 17:50:12
 * @version: 4.0.4
 */

namespace qh4module\rabc\models\privilege;


use qh4module\rabc\HpRabc;
use qh4module\rabc\models\BkUserInfoActiveRecord;
use qttx\helper\ArrayHelper;
use service\qh_generate_code\SorterValidator;
use qh4module\rabc\models\BkPrivilegeActiveRecord;
use qh4module\rabc\models\BkPrivilegeModel;

/**
 * Class Index
 * 分页获取tbl_bk_privilege表的数据
 * @package qh4module\rabc\models\privilege
 */
class Index extends BkPrivilegeModel
{
    /**
     * @var int 页数,从1开始
     */
    public $page = 1;

    /**
     * @var int 每页显示数量
     */
    public $limit = 10;

    /**
     * @var array 接收参数,排序规则
     * 格式:['id'=>'asc','name'=>'desc'],
     */
    public $sorter = [];

    /**
     * @var string 接收参数，筛选字段：ID
     */
    public $id;

    /**
     * @var string 接收参数，筛选字段：上级
     */
    public $parent_id;

    /**
     * @var string 接收参数，筛选字段：唯一标记
     */
    public $key;

    /**
     * @var string 接收参数，筛选字段：名称
     */
    public $name;

    /**
     * @var int 接收参数，筛选字段：类型
     */
    public $type;

    /**
     * @var int 接收参数，筛选字段：级别
     */
    public $level;

    /**
     * @var string 接收参数，筛选字段：关联的路由
     */
    public $path;

    /**
     * @var int 接收参数，筛选字段：排序
     */
    public $sort;


    /**
     * @inheritDoc
     */
    public function rules()
    {
        return ArrayHelper::merge([
            [['page', 'limit'], 'integer'],
            [['sorter'], 'sorter'],
        ], parent::rules());
    }

    /**
     * @inheritDoc
     */
    public function attributeLangs()
    {
        return ArrayHelper::merge(
            parent::attributeLangs(),
            [
                'page' => '页数',
                'limit' => '每页条数',
                'sorter' => '排序规则',
            ]
        );
    }

    /**
     * @inheritDoc
     */
    public function run()
    {
        // 所有的字段,根据列表显示进行删减
        $fields = ['`ta`.`id`', '`ta`.`parent_id`', '`ta`.`id_path`', '`ta`.`key`', '`ta`.`key_path`',
            '`ta`.`name`', '`ta`.`desc`', '`ta`.`type`', '`ta`.`level`', '`ta`.`icon`',
            '`ta`.`path`', '`ta`.`create_time`', '`ta`.`create_by`', '`ta`.`sort`',
            '`ta`.`del_time`','tb.nick_name as create_by_name'
        ];

        $priv_ids = HpRabc::getUserRelationPrivilege();
        if(empty($priv_ids)) return [];
        // 构建基础查询
        $tb_user_info = BkUserInfoActiveRecord::tableName();
        $sql = BkPrivilegeActiveRecord::find()
            ->select($fields)
            ->leftJoin("$tb_user_info as tb", 'ta.create_by=tb.user_id')
            ->whereIn('id', $priv_ids);

        // 是否筛选的标记,如果筛选,则使用平铺列表,默认使用树形列表
        $filter_tag = false;
        // 追加筛选条件
        if ($this->id) {
            $filter_tag = true;
            $sql->where('`ta`.`id`= :id316')
                ->bindValue('id316', $this->id);
        }
        if ($this->parent_id) {
            $filter_tag = true;
            $sql->where('`ta`.`parent_id` like :parent_id912')
                ->bindValue('parent_id912', "%{$this->parent_id}%");
        }
        if ($this->key) {
            $filter_tag = true;
            $sql->where('`ta`.`key` like :key103')
                ->bindValue('key103', "%{$this->key}%");
        }
        if ($this->name) {
            $filter_tag = true;
            $sql->where('`ta`.`name` like :name158')
                ->bindValue('name158', "%{$this->name}%");
        }
        if ($this->type) {
            $filter_tag = true;
            $sql->where('`ta`.`type`= :type827')
                ->bindValue('type827', $this->type);
        }
        if ($this->level) {
            $filter_tag = true;
            $sql->where('`ta`.`level`= :level884')
                ->bindValue('level884', $this->level);
        }
        if ($this->path) {
            $filter_tag = true;
            $sql->where('`ta`.`path` like :path523')
                ->bindValue('path523', "%{$this->path}%");
        }
        if ($this->sort) {
            $filter_tag = true;
            $sql->where('`ta`.`sort`= :sort428')
                ->bindValue('sort428', $this->sort);
        }

        // 追加排序
        if ($this->sorter) {
            $sql->orderBy(SorterValidator::format2Mode1($this->sorter));
        }

        $sql->where('`ta`.`del_time`= :del_time530')
            ->bindValue('del_time530', 0);

        if ($filter_tag) {
            // 获取分页结果
            list($total, $data) = $sql->asArray()
                ->pageLimit($this->page, $this->limit);
        }else{
          // 获取所有结果并格式化树状
            $result = $sql->asArray()->all();
            $data = ArrayHelper::formatTree($result, '');

            $total = sizeof($data);
        }


        return array(
            'total' => $total,
            'list' => $data,
            'page' => $this->page,
            'limit' => $this->limit
        );
    }
}
