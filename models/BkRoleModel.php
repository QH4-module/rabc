<?php
/**
 * File Name: BkRoleModel.php
 * Automatically generated by QGC tool
 * @date: 2021-04-22 10:38:00
 * @version: 4.0.4
 */

namespace qh4module\rabc\models;


use qh4module\token\TokenFilter;
use QTTX;
use qttx\web\Model;

/**
 * Class BkRoleModel
 * @package qh4module\rabc\models
 * @description 数据表tbl_bk_role的Validate模型
 */
class BkRoleModel extends Model
{

    /**
     * {@inheritDoc}
     */
    public function rules()
    {
        return [
            [['id', 'create_by'], 'string', ['max' => 64]],
            [['name'], 'string', ['max' => 45]],
            [['desc'], 'string', ['max' => 200]],
            [['create_time', 'is_fixed', 'del_time'], 'integer']
        ];
    }

    /**
     * {@inheritDoc}
     */
    public function attributeLangs()
    {
        return [
            'id' => 'ID',
            'name' => '名称',
            'desc' => '说明',
            'create_by' => '创建人',
            'create_time' => '创建时间',
            'is_fixed' => '不可变'
        ];
    }

    /**
     * 获取所有角色id
     * @return array|mixed
     */
    public static function getAllId()
    {
        $key = RabcRedis::role_all_id();
        if (QTTX::$app->redis) {
            $result = QTTX::$app->redis->get($key);
            if ($result) return json_decode($result, true);
        }

        $result = QTTX::$app->db
            ->select('id')
            ->from(BkRoleActiveRecord::tableName())
            ->where('del_time=0')
            ->column();

        if (QTTX::$app->redis && $result) {
            QTTX::$app->redis->set($key, json_encode($result));
        }

        return $result;
    }


    /**
     * 获取用户直接关联的角色
     * @param null $user_id
     * @return array|null
     */
    public static function getUserRelationRole($user_id = null)
    {
        if (empty($user_id)) $user_id = TokenFilter::getPayload('user_id');

        $key = RabcRedis::user_relation_role();

        if (QTTX::$app->redis) {
            // 键或域不存在返回 false
            $result = QTTX::$app->redis->hget($key, $user_id);
            if ($result) return json_decode($result, true);
        }

        $result = QTTX::$app->db
            ->select('role_id')
            ->from(BkRelationUserRoleActiveRecord::tableName())
            ->where('user_id= :uid and del_time=0')
            ->bindValue('uid', $user_id)
            ->column();
        if ($result) $result = array_unique($result);

        if (QTTX::$app->redis && $result) {
            QTTX::$app->redis->hset(RabcRedis::user_relation_role(), $user_id, json_encode($result));
        }

        return $result;
    }
}
