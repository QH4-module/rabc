<?php
/**
 * File Name: Update.php
 * Automatically generated by QGC tool
 * @date 2021-03-16 11:25:21
 * @version 4.0.0
 */

namespace qh4module\rabc\models\user;


use qh4module\rabc\HpRabc;
use qh4module\rabc\models\BkRelationUserRoleActiveRecord;
use qh4module\rabc\models\BkUserInfoActiveRecord;
use qh4module\rabc\models\BkUserInfoModel;
use qh4module\rabc\models\RabcRedis;
use qttx\components\db\DbModel;
use qttx\helper\ArrayHelper;
use qh4module\rabc\models\BkUserActiveRecord;
use qh4module\rabc\models\BkUserModel;
use qttx\helper\StringHelper;

/**
 * Class Update
 * 更新tbl_bk_user表单条数据
 * @package qh4module\rabc\models\models\user
 */
class Update extends BkUserModel
{

    /**
     * @var string 接收参数,必须：ID
     */
    public $id;

    /**
     * @var string 接收参数,必须：账号
     */
    public $account;

    /**
     * @var string 接收参数,非必须：手机号
     */
    public $mobile;

    /**
     * @var string 接收参数,非必须：邮箱
     */
    public $email = '';

    /**
     * @var string 接收参数,非必须：密码
     */
    public $password = '';

    /**
     * @var string 接收参数,非必须：
     */
    public $wechat_unionid = '';

    /**
     * @var string 接收参数,非必须：
     */
    public $wechat_openid = '';

    /**
     * @var string 接收参数,非必须：
     */
    public $qq_id = '';

    /**
     * @var string 接收参数,非必须：
     */
    public $alipay_id = '';

    /**
     * @var string 接收参数,非必须：
     */
    public $weibo_id = '';

    /**
     * @var string 接收参数,非必须：
     */
    public $apple_id = '';

    /**
     * @var int 接收参数,必须：状态
     */
    public $state;

    /**
     * @var string 接收参数,必须:名字
     */
    public $nick_name;

    /**
     * @var int 接收参数,非必须,所属地区
     */
    public $city_id = 0;

    /**
     * @var int 接收参数,非必须,性别
     */
    public $gender = 0;

    /**
     * @var string 接收参数,非必须,生日
     */
    public $birthday;

    /**
     * @var string 接收参数,非必须,个人说明
     */
    public $description = '';

    /**
     * @var string 接收参数,非必须,头像
     */
    public $avatar = '';

    /**
     * @var string[] 接收参数,非必须,所属角色
     */
    public $role_ids = [];

    /**
     * @inheritDoc
     */
    public function rules()
    {
        $info_model = new BkUserInfoModel();
        return ArrayHelper::merge([
            [['id','account','state','nick_name'],'required'],
            [['roles'], 'array', 'type' => 'string'],
            [['roles'], 'customer', 'callback' => function ($value) {
                $roles = HpRabc::getUserRelationChildrenRole(null, true);
                if (empty(array_diff($value, $roles))) {
                    return true;
                }
                return '超出授权范围';
            }],
        ], parent::rules(),$info_model->rules());
    }

    /**
     * @inheritDoc
     */
    public function attributeLangs()
    {
        $info_model = new BkUserInfoModel();
        return ArrayHelper::merge(parent::attributeLangs(), $info_model->attributeLangs());
    }


    /**
     * @inheritDoc
     */
    public function run()
    {
        $db = \QTTX::$app->db;

        $db->beginTrans();

        try {

            // 更新账号信息
            if (!$this->updateUser($db)) {
                return false;
            }

            // 更新基本信息
            $this->updateInfo($db);

            // 更新角色关联
            $this->updateRole($db);

            // 清空缓存
            RabcRedis::clearRedis();
            HpRabc::delRedisUserInfo($this->id);

            $db->commitTrans();

            return true;

        } catch (\Exception $exception) {
            $db->rollBackTrans();
            throw $exception;
        }
    }

    protected function updateUser($db)
    {
        $model = BkUserActiveRecord::findOne($this->id);
        if (empty($model)) {
            $this->addError('id', '更新条目不存在');
            return false;
        }
        $model->account = $this->account;
        if ($this->mobile) {
            $model->mobile = $this->mobile;
        }
        $model->email = $this->email;
        if ($this->password && $this->password != $model->password) {
            $model->salt = StringHelper::random(8);
            $model->password = md5($model->salt . $this->password);
        }
        $model->wechat_unionid = $this->wechat_unionid;
        $model->wechat_openid = $this->wechat_openid;
        $model->qq_id = $this->qq_id;
        $model->alipay_id = $this->alipay_id;
        $model->weibo_id = $this->weibo_id;
        $model->apple_id = $this->apple_id;
        $model->state = $this->state;
        $model->update($db);
        return true;
    }

    protected function updateInfo($db)
    {
        $model = BkUserInfoActiveRecord::findOne($this->id);
        $model->nick_name = $this->nick_name;
        $model->avatar = $this->avatar;
        $model->gender = $this->gender;
        if ($this->birthday) {
            $model->birthday = $this->birthday;
        }
        $model->description = $this->description;
        $model->city_id = $this->city_id;
        $model->update($db);
    }

    /**
     * @param $db DbModel
     */
    protected function updateRole($db)
    {
        $db->update(BkRelationUserRoleActiveRecord::tableName())
            ->col('del_time', time())
            ->whereArray(['user_id' => $this->id])
            ->where('del_time=0')
            ->query();

        if (empty($this->role_ids)) return;

        foreach ($this->role_ids as $rid) {
            $model = new BkRelationUserRoleActiveRecord();
            $model->user_id = $this->id;
            $model->role_id = $rid;
            $model->del_time = 0;
            $model->insert($db);
        }
    }
}
