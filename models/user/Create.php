<?php
/**
 * File Name: Create.php
 * Automatically generated by QGC tool
 * @date: 2021-04-21 11:09:02
 * @version: 4.0.4
 */

namespace qh4module\rabc\models\user;


use qh4module\rabc\HpRabc;
use qh4module\rabc\models\BkRelationUserRoleActiveRecord;
use qh4module\rabc\models\BkUserInfoActiveRecord;
use qh4module\rabc\models\BkUserInfoModel;
use qh4module\rabc\models\RabcRedis;
use qttx\helper\ArrayHelper;
use qh4module\rabc\models\BkUserActiveRecord;
use qh4module\rabc\models\BkUserModel;
use qh4module\token\TokenFilter;
use QTTX;
use qttx\helper\StringHelper;

/**
 * Class Create
 * tbl_bk_user表新增一条数据
 * @package qh4module\rabc\models\models\user
 */
class Create extends BkUserModel
{

    /**
     * @var string 接收参数,必须：账号
     */
    public $account;

    /**
     * @var string 接收参数,必须：密码
     */
    public $password;

    /**
     * @var string 接收参数,必须:名字
     */
    public $nick_name;

    /**
     * @var int 接收参数,非必须,所属地区
     */
    public $city_id = 0;

    /**
     * @var string[] 接收参数,非必须,所属角色
     */
    public $role_ids = [];

    /**
     * @inheritDoc
     */
    public function rules()
    {
        $info_model = new BkUserInfoModel();
        return ArrayHelper::merge([
            [['account', 'password', 'nick_name'], 'required'],
            [['roles'], 'array', 'type' => 'string'],
            [['roles'], 'customer', 'callback' => function ($value) {
                $roles = HpRabc::getUserRelationChildrenRole(null, true);
                if (empty(array_diff($value, $roles))) {
                    return true;
                }
                return '超出授权范围';
            }],
        ], parent::rules(), $info_model->rules());
    }

    /**
     * @inheritDoc
     */
    public function attributeLangs()
    {
        $info_model = new BkUserInfoModel();
        return ArrayHelper::merge(parent::attributeLangs(), $info_model->attributeLangs());
    }

    /**
     * @inheritDoc
     */
    public function run()
    {
        $db = QTTX::$app->db;

        $db->beginTrans();

        try {
            // 查询账号是否重复
            $has = $db->select('id')
                ->from(BkUserActiveRecord::tableName())
                ->whereArray(['account' => $this->account])
                ->row();
            if (!empty($has)) {
                $this->addError('account', '账号重复');
                return false;
            }

            $id = QTTX::$app->snowflake->id();

            // 用户账号表插入
            $this->insertUser($id, $db);

            // 用户信息表插入
            $this->insertUserInfo($id, $db);

            // 角色关联表插入
            $this->insertRole($id, $db);

            // 清空rabc相关缓存
            RabcRedis::clearRedis();

            $db->commitTrans();

            return true;

        } catch (\Exception $exception) {
            $db->rollBackTrans();
            throw $exception;
        }
    }


    protected function insertUser($id, $db)
    {
        $model = new BkUserActiveRecord();
        $model->id = $id;
        $model->account = $this->account;
        $model->salt = StringHelper::random(8);
        $model->password = md5($model->salt . $this->password);
        $model->create_by = TokenFilter::getPayload('user_id');
        $model->create_time = time();
        $model->state = 1;
        $model->del_time = 0;
        $model->insert($db);
    }

    protected function insertUserInfo($id, $db)
    {
        $model = new BkUserInfoActiveRecord();
        $model->user_id = $id;
        $model->nick_name = $this->nick_name;
        $model->gender = 0;
        $model->avatar = '';
        $model->city_id = $this->city_id;
        $model->insert($db);
    }

    protected function insertRole($id, $db)
    {
        if (empty($this->role_ids)) return;

        foreach ($this->role_ids as $rid) {
            $model = new BkRelationUserRoleActiveRecord();
            $model->user_id = $id;
            $model->role_id = $rid;
            $model->del_time = 0;
            $model->insert($db);
        }
    }
}